class TeleporterEffects : EventHandler
{
    Array<String> RedGateTextures;
    Array<String> GreenGateTextures;
    Array<String> BlueGateTextures;
    Array<String> WhiteGateTextures;
    Array<String> YellowGateTextures;
    Array<String> BlackGateTextures;
    Array<String> PurpleGateTextures;
    
    const NO_FOUNTAIN = 0;
    const TELEPORT_SPECIAL = 70;
    const EXIT_SPECIAL = 243;
    const EXIT_SPECIAL_SECRET = 244;
    
    const WALK_ACTIVATION = 1;
    const MONSTER_ACTIVATION = 4;

    //check if our GateTextures array contains the texture we are looking for
    bool HasTexture(textureid texture, Array<String> textures)
    {
        let texture_name = TexMan.GetName(texture).MakeLower();
        for (int i = 0;i < textures.size();i++)
        {       
            if (texture_name == textures[i])
                return true;
        }
        return false;
    }
    
    //Get the fountain for our sector, based on it's texture
    //This will return the health value that we need
    int GetFountainColour(textureid texture)
    {
        if (HasTexture(texture,WhiteGateTextures)) return 7;
        if (HasTexture(texture,BlackGateTextures)) return 6;
        if (HasTexture(texture,BlueGateTextures)) return 3;
        if (HasTexture(texture,YellowGateTextures)) return 4;
        if (HasTexture(texture,GreenGateTextures)) return 2;
        if (HasTexture(texture,RedGateTextures)) return 1;
        if (HasTexture(texture,PurpleGateTextures)) return 5;
        return NO_FOUNTAIN;
    }
    
    override void WorldThingSpawned(WorldEvent e)
    {   
        if(e.Thing is "TeleportDest" && teleporter_use_dests)
        {
            let floor_texture = e.Thing.cursector.GetTexture(0);
            int fountainColour = GetFountainColour(floor_texture);
            let pos = e.Thing.pos;
            
            if (fountainColour != NO_FOUNTAIN)
            {
                let fountain = Actor.Spawn("GravityFountain",(pos.x,pos.y,0));
                fountain.Health = fountainColour;
            }
        }
    }
    
    String sanitise_cvars(String cvar)
    {
        String re = cvar; //make a copy because the below functions work in-place
        
        //sanitise the input texture cvars in case the user fucks it up
        re.Replace(" ", ""); //remove spaces
        re.Replace(",,", ","); //remove extra commas
        re = re.MakeLower(); //make lowercase so string names don't matter
        
        return re;
    }

    override void OnRegister()
    {
        sanitise_cvars(teleporter_flats_purple).Split(PurpleGateTextures, ",");
        sanitise_cvars(teleporter_flats_black).Split(BlackGateTextures, ",");
        sanitise_cvars(teleporter_flats_green).Split(GreenGateTextures, ",");
        sanitise_cvars(teleporter_flats_red).Split(RedGateTextures, ",");
        sanitise_cvars(teleporter_flats_blue).Split(BlueGateTextures, ",");
        sanitise_cvars(teleporter_flats_white).Split(WhiteGateTextures, ",");
        sanitise_cvars(teleporter_flats_yellow).Split(YellowGateTextures, ",");
    }
    
    //Determine if any line in our sector has the Teleport special
    bool HasTeleportSpecial(Sector s)
    {
        int lines = s.lines.size();
        for (int j = 0;j < lines;j++)
        {      
            //skip this line if it is not a "walkable" or "monster" activation (for things like teleport/exit switches)
            bool walk = s.lines[j].Activation == WALK_ACTIVATION;
            bool monster = s.lines[j].Activation == MONSTER_ACTIVATION;
                      
            if (monster && !teleporter_allow_monster)
                continue;
            if (!walk && !monster)
                continue;
            
            int special = s.lines[j].Special;
            if (special == TELEPORT_SPECIAL)
                return true;
            if (teleporter_allow_exits && (special == EXIT_SPECIAL || special == EXIT_SPECIAL_SECRET))
                return true;
        }
        return false;
    }

    override void WorldLoaded(WorldEvent e)
    {
        if (e.IsReopen)
            return;
            
        int sectors = level.sectors.size();
        
        for (int i = 0; i < sectors;i++)
        {
            Sector cursect = level.sectors[i];
            let floortex = cursect.GetTexture(0);
            let ceiltex = cursect.GetTexture(1);
            
            int fountainColour = GetFountainColour(floortex);
            bool hasSpecial = HasTeleportSpecial(cursect);
                      
            //skip this sector if it doesn't have a valid teleporter texture
            if (fountainColour == NO_FOUNTAIN || !hasSpecial)
                continue;
                
            //skip if ceil texture isn't the same and "full teleporter only" mode is not set
            if (floortex != ceiltex && teleporter_match_ceiling)
                continue;
            
            //spawn fountain at sectors midpoint
            vector2 center = cursect.CenterSpot;
            let fountain = Actor.Spawn("GravityFountain",(center.x,center.y,0));
            
            //Set the fountain health. This determines it's colour. See here for more info
            //https://zdoom.org/wiki/Particles
            fountain.Health = fountainColour;
        }
    }
}
